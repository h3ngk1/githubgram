package com.hengki.github.ui

import android.util.Log
import androidx.lifecycle.LiveData
import androidx.lifecycle.MutableLiveData
import androidx.lifecycle.ViewModel
import com.google.android.material.search.SearchBar
import com.hengki.github.data.response.GithubResponse
import com.hengki.github.data.response.ItemsItem
import com.hengki.github.data.retrofit.ApiConfig

import retrofit2.Call
import retrofit2.Response
import retrofit2.Callback

class MainViewModel : ViewModel() {
    companion object {

        private const val TAG = "MainActivity"
    }



    private val _isLoading = MutableLiveData<Boolean>()
    val isLoading: LiveData<Boolean> = _isLoading

    private val _listUser = MutableLiveData<List<ItemsItem>>()
    val listUser: LiveData<List<ItemsItem>> = _listUser


    fun ItemsItem(q: String) {
        _isLoading.value = true
        val client = ApiConfig.getApiService().itemsItem(q)
        client.enqueue(object : Callback<GithubResponse> {
            override fun onResponse(
                call: Call<GithubResponse>,
                response: Response<GithubResponse>
            ) {
                _isLoading.value = true
                if (response.isSuccessful) {
                    _listUser.postValue(response.body()?.items)
                }
            }

            override fun onFailure(call: Call<GithubResponse>, t: Throwable) {
                _isLoading.value = false
                Log.e(TAG, "onFailure: ${t.message}")
            }
        })
    }
    fun ItemsItem(): LiveData<List<ItemsItem>>{
        return listUser
    }
}
